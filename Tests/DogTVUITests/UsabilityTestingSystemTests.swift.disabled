import Foundation
import XCTest

@testable import DogTVUI

/**
 * UsabilityTestingSystemTests: Comprehensive testing for usability testing framework
 *
 * Focuses on:
 * - Test scenario simulation
 * - Behavioral observation
 * - User experience rating
 * - Scientific insights generation
 */
class UsabilityTestingSystemTests: XCTestCase {
    // MARK: - Test Properties

    /// Usability testing system for testing
    private var usabilityTestingSystem: UsabilityTestingSystem!

    // MARK: - Setup and Teardown

    override func setUp() {
        super.setUp()
        usabilityTestingSystem = UsabilityTestingSystem()
    }

    override func tearDown() {
        usabilityTestingSystem = nil
        super.tearDown()
    }

    // MARK: - Test Scenario Tests

    /// Test all test scenarios
    func testAllTestScenarios() {
        let scenarios: [UsabilityTestingSystem.TestScenario] = [
            .initialOnboarding,
            .visionModeComparison,
            .educationalContent,
            .socialSharing,
            .performancePerception
        ]

        let participantProfiles = [
            UsabilityTestingSystem.ParticipantProfile(
                age: 35,
                dogBreed: "Border Collie",
                dogAge: 3,
                previousTVExperience: true
            ),
            UsabilityTestingSystem.ParticipantProfile(
                age: 42,
                dogBreed: "Labrador Retriever",
                dogAge: 7,
                previousTVExperience: false
            )
        ]

        for scenario in scenarios {
            for profile in participantProfiles {
                let config = UsabilityTestingSystem.UsabilityTestConfig(
                    scenario: scenario,
                    duration: 15 * 60, // 15 minutes
                    participantProfile: profile,
                    privacyLevel: .anonymized
                )

                let results = usabilityTestingSystem.conductUsabilityTest(config: config)

                XCTAssertEqual(results.testConfig.scenario, scenario, "Scenario mismatch")
                XCTAssertEqual(results.testConfig.participantProfile.dogBreed, profile.dogBreed, "Participant profile mismatch")

                // Validate behavioral observations
                XCTAssertFalse(results.behavioralObservations.isEmpty, "No behavioral observations recorded")
                XCTAssertTrue(
                    results.behavioralObservations.allSatisfy { $0.duration > 0 },
                    "Invalid observation duration"
                )

                // Validate user experience ratings
                XCTAssertFalse(results.userExperienceRatings.isEmpty, "No user experience ratings recorded")
                XCTAssertTrue(
                    results.userExperienceRatings.allSatisfy { $0.score >= 1.0 && $0.score <= 5.0 },
                    "Invalid user experience rating"
                )
            }
        }
    }

    // MARK: - Behavioral Observation Tests

    /// Test behavioral observation generation
    func testBehavioralObservationGeneration() {
        let scenarios: [UsabilityTestingSystem.TestScenario] = [
            .initialOnboarding,
            .visionModeComparison,
            .educationalContent
        ]

        let expectedResponseTypes: [UsabilityTestingSystem.TestScenario: [UsabilityTestingSystem.DogBehavioralResponse]] = [
            .initialOnboarding: [.highEngagement, .moderateEngagement, .lowEngagement],
            .visionModeComparison: [.moderateEngagement],
            .educationalContent: [.highEngagement]
        ]

        for scenario in scenarios {
            let config = UsabilityTestingSystem.UsabilityTestConfig(
                scenario: scenario,
                participantProfile: UsabilityTestingSystem.ParticipantProfile(
                    age: 40,
                    dogBreed: "German Shepherd",
                    dogAge: 5
                )
            )

            let results = usabilityTestingSystem.conductUsabilityTest(config: config)

            XCTAssertFalse(results.behavioralObservations.isEmpty, "No behavioral observations for \(scenario)")

            if let expectedResponses = expectedResponseTypes[scenario] {
                let observedResponses = results.behavioralObservations.map { $0.response }

                for expectedResponse in expectedResponses {
                    XCTAssertTrue(
                        observedResponses.contains(expectedResponse),
                        "Missing expected response \(expectedResponse) for \(scenario)"
                    )
                }
            }
        }
    }

    // MARK: - User Experience Rating Tests

    /// Test user experience rating generation
    func testUserExperienceRatingGeneration() {
        let categories: [UsabilityTestingSystem.UserExperienceCategory] = [
            .easeOfUse,
            .educationalValue,
            .visualEngagement,
            .entertainmentFactor,
            .scientificInsight
        ]

        let config = UsabilityTestingSystem.UsabilityTestConfig(
            scenario: .educationalContent,
            participantProfile: UsabilityTestingSystem.ParticipantProfile(
                age: 35,
                dogBreed: "Border Collie",
                dogAge: 3
            )
        )

        let results = usabilityTestingSystem.conductUsabilityTest(config: config)

        XCTAssertFalse(results.userExperienceRatings.isEmpty, "No user experience ratings generated")

        for category in categories {
            guard let rating = results.userExperienceRatings.first(where: { $0.category == category }) else {
                XCTFail("Missing rating for category \(category)")
                return
            }
            XCTAssertTrue(rating.score >= 1.0 && rating.score <= 5.0, "Invalid rating score")
        }
    }

    // MARK: - Scientific Insights Tests

    /// Test scientific insights generation
    func testScientificInsightsGeneration() {
        let scenarios: [UsabilityTestingSystem.TestScenario] = [
            .visionModeComparison,
            .educationalContent,
            .performancePerception
        ]

        for scenario in scenarios {
            let config = UsabilityTestingSystem.UsabilityTestConfig(
                scenario: scenario,
                participantProfile: UsabilityTestingSystem.ParticipantProfile(
                    age: 40,
                    dogBreed: "Labrador Retriever",
                    dogAge: 6
                )
            )

            let results = usabilityTestingSystem.conductUsabilityTest(config: config)

            guard let insights = results.scientificInsights else {
                XCTFail("No scientific insights generated")
                return
            }
            XCTAssertFalse(insights.isEmpty, "Scientific insights list is empty")

            for insight in insights {
                XCTAssertFalse(insight.isEmpty, "Empty scientific insight")
                XCTAssertTrue(
                    insight.contains("Engagement") || insight.contains("Rating"),
                    "Invalid scientific insight format"
                )
            }
        }
    }

    // MARK: - Privacy Level Tests

    /// Test different privacy levels
    func testPrivacyLevels() {
        let privacyLevels: [UsabilityTestingSystem.PrivacyLevel] = [
            .minimal,
            .anonymized,
            .detailed,
            .scientific
        ]

        for privacyLevel in privacyLevels {
            let config = UsabilityTestingSystem.UsabilityTestConfig(
                scenario: .socialSharing,
                participantProfile: UsabilityTestingSystem.ParticipantProfile(
                    age: 45,
                    dogBreed: "Golden Retriever",
                    dogAge: 4
                ),
                privacyLevel: privacyLevel
            )

            let results = usabilityTestingSystem.conductUsabilityTest(config: config)

            XCTAssertEqual(
                results.testConfig.privacyLevel,
                privacyLevel,
                "Privacy level mismatch for \(privacyLevel)"
            )

            // Additional privacy-specific assertions can be added here
        }
    }

    // MARK: - Performance Tests

    /// Comprehensive performance test for usability testing
    func testUsabilityTestingPerformance() {
        let iterations = 50

        measure {
            for _ in 0..<iterations {
                let config = UsabilityTestingSystem.UsabilityTestConfig(
                    scenario: .educationalContent,
                    participantProfile: UsabilityTestingSystem.ParticipantProfile(
                        age: 35,
                        dogBreed: "Border Collie",
                        dogAge: 3
                    )
                )

                _ = usabilityTestingSystem.conductUsabilityTest(config: config)
            }
        }
    }
}
