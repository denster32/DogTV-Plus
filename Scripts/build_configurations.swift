#!/usr/bin/env swift

import Foundation

/// Advanced build configuration manager for DogTV+ production deployment
struct BuildConfigurationManager {
    
    enum BuildConfiguration: String, CaseIterable {
        case debug = "Debug"
        case release = "Release"
        case archive = "Archive"
        case testing = "Testing"
        case profiling = "Profiling"
        
        var swiftFlags: [String] {
            switch self {
            case .debug:
                return ["-Onone", "-DDEBUG", "-enable-testing"]
            case .release:
                return ["-O", "-DRELEASE", "-whole-module-optimization"]
            case .archive:
                return ["-O", "-DARCHIVE", "-whole-module-optimization", "-enable-library-evolution"]
            case .testing:
                return ["-Onone", "-DTESTING", "-enable-testing", "-enable-code-coverage"]
            case .profiling:
                return ["-O", "-DPROFILING", "-debug-info-format=dwarf"]
            }
        }
        
        var preprocessorMacros: [String] {
            switch self {
            case .debug:
                return ["DEBUG=1", "ENABLE_LOGGING=1", "ENABLE_ANALYTICS=0"]
            case .release:
                return ["NDEBUG=1", "ENABLE_LOGGING=0", "ENABLE_ANALYTICS=1"]
            case .archive:
                return ["NDEBUG=1", "ENABLE_LOGGING=0", "ENABLE_ANALYTICS=1", "APP_STORE=1"]
            case .testing:
                return ["TESTING=1", "ENABLE_LOGGING=1", "ENABLE_ANALYTICS=0", "MOCK_SERVICES=1"]
            case .profiling:
                return ["PROFILING=1", "ENABLE_LOGGING=1", "ENABLE_ANALYTICS=1", "PERFORMANCE_TRACKING=1"]
            }
        }
        
        var codeSigningSettings: [String: String] {
            switch self {
            case .debug, .testing, .profiling:
                return [
                    "CODE_SIGN_STYLE": "Automatic",
                    "DEVELOPMENT_TEAM": "$(DEVELOPMENT_TEAM)",
                    "CODE_SIGN_IDENTITY": "Apple Development"
                ]
            case .release:
                return [
                    "CODE_SIGN_STYLE": "Manual",
                    "DEVELOPMENT_TEAM": "$(DEVELOPMENT_TEAM)",
                    "CODE_SIGN_IDENTITY": "Apple Distribution",
                    "PROVISIONING_PROFILE_SPECIFIER": "$(PROVISIONING_PROFILE)"
                ]
            case .archive:
                return [
                    "CODE_SIGN_STYLE": "Manual",
                    "DEVELOPMENT_TEAM": "$(DEVELOPMENT_TEAM)",
                    "CODE_SIGN_IDENTITY": "Apple Distribution",
                    "PROVISIONING_PROFILE_SPECIFIER": "$(APP_STORE_PROVISIONING_PROFILE)"
                ]
            }
        }
    }
    
    static func generateXcodeConfigFiles() {
        for config in BuildConfiguration.allCases {
            let content = generateConfigFileContent(for: config)
            let fileName = "Config/\(config.rawValue).xcconfig"
            
            do {
                try FileManager.default.createDirectory(atPath: "Config", withIntermediateDirectories: true)
                try content.write(toFile: fileName, atomically: true, encoding: .utf8)
                print("✅ Generated \(fileName)")
            } catch {
                print("❌ Failed to generate \(fileName): \(error)")
            }
        }
    }
    
    private static func generateConfigFileContent(for config: BuildConfiguration) -> String {
        var content = """
        // \(config.rawValue) Configuration for DogTV+
        // Auto-generated by build_configurations.swift
        
        """
        
        // Swift compiler flags
        content += "SWIFT_ACTIVE_COMPILATION_CONDITIONS = \(config.preprocessorMacros.joined(separator: " "))\n"
        content += "OTHER_SWIFT_FLAGS = \(config.swiftFlags.joined(separator: " "))\n\n"
        
        // Code signing
        for (key, value) in config.codeSigningSettings {
            content += "\(key) = \(value)\n"
        }
        
        content += "\n"
        
        // Configuration-specific settings
        content += configSettingsString(for: config)
        
        return content
    }

    private static func configSettingsString(for config: BuildConfiguration) -> String {
        switch config {
        case .debug:
            return debugSettingsString()
        case .release:
            return releaseSettingsString()
        case .archive:
            return archiveSettingsString()
        case .testing:
            return testingSettingsString()
        case .profiling:
            return profilingSettingsString()
        }
    }

    private static func debugSettingsString() -> String {
        return """
        // Debug Configuration
        GCC_OPTIMIZATION_LEVEL = 0
        SWIFT_OPTIMIZATION_LEVEL = -Onone
        ENABLE_TESTABILITY = YES
        ONLY_ACTIVE_ARCH = YES
        DEBUG_INFORMATION_FORMAT = dwarf
        MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE
        """
    }

    private static func releaseSettingsString() -> String {
        return """
        // Release Configuration
        GCC_OPTIMIZATION_LEVEL = s
        SWIFT_OPTIMIZATION_LEVEL = -O
        ENABLE_TESTABILITY = NO
        ONLY_ACTIVE_ARCH = NO
        DEBUG_INFORMATION_FORMAT = dwarf-with-dsym
        MTL_ENABLE_DEBUG_INFO = NO
        DEAD_CODE_STRIPPING = YES
        """
    }

    private static func archiveSettingsString() -> String {
        return """
        // Archive Configuration
        GCC_OPTIMIZATION_LEVEL = s
        SWIFT_OPTIMIZATION_LEVEL = -O
        ENABLE_TESTABILITY = NO
        ONLY_ACTIVE_ARCH = NO
        DEBUG_INFORMATION_FORMAT = dwarf-with-dsym
        MTL_ENABLE_DEBUG_INFO = NO
        DEAD_CODE_STRIPPING = YES
        VALIDATE_PRODUCT = YES
        """
    }

    private static func testingSettingsString() -> String {
        return """
        // Testing Configuration
        GCC_OPTIMIZATION_LEVEL = 0
        SWIFT_OPTIMIZATION_LEVEL = -Onone
        ENABLE_TESTABILITY = YES
        ONLY_ACTIVE_ARCH = YES
        DEBUG_INFORMATION_FORMAT = dwarf
        MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE
        CLANG_ENABLE_CODE_COVERAGE = YES
        """
    }

    private static func profilingSettingsString() -> String {
        return """
        // Profiling Configuration
        GCC_OPTIMIZATION_LEVEL = s
        SWIFT_OPTIMIZATION_LEVEL = -O
        ENABLE_TESTABILITY = YES
        ONLY_ACTIVE_ARCH = NO
        DEBUG_INFORMATION_FORMAT = dwarf
        MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE
        """
    }
}

// Generate configuration files
BuildConfigurationManager.generateXcodeConfigFiles()
print("🎯 All build configurations generated successfully!")